/******altered Vitaliy Ovod_04/18/2011**************************/
EXECUTE BLOCK
AS
DECLARE ASSAY_ID_VAR SMALLINT; 
DECLARE ASSAY_DATE_VAR DATE;
DECLARE ASSAY_TYPE_ID_VAR SMALLINT;
DECLARE DONE_BY_VAR SMALLINT;
DECLARE PROCESS_BY_VAR SMALLINT;
DECLARE SAMPLE_PROCESS_BY_VAR SMALLINT;
DECLARE ENZYME_ID_VAR SMALLINT;
DECLARE ANTIBODY_ID_VAR SMALLINT;
DECLARE EXPER_FILE_VAR VARCHAR(200);

DECLARE A CURSOR FOR (  /*returns assay records out of imported records */
   SELECT I.ASSAY_DATE, I.ASSAY_TYPE_ID, I.ASSAY_DONE_BY, I.DATA_PROCESS_BY, 
          I.SAMPLE_PROCESS_BY, I.ENZYME_ID, I.ANTIBODY_ID, I.EXPER_FILE
   FROM   TMP_XEVO_IMPORT I
   GROUP
      BY I.ASSAY_DATE, I.ASSAY_TYPE_ID, I.ASSAY_DONE_BY, I.DATA_PROCESS_BY,
         I.SAMPLE_PROCESS_BY, I.ENZYME_ID, I.ANTIBODY_ID, I.EXPER_FILE
);



DECLARE FILENAME_DESC_VAR VARCHAR(200);
DECLARE SUBJECT_NUM_VAR VARCHAR(10);
DECLARE FLUID_TYPE_ID_VAR SMALLINT;
DECLARE LEVEL_TP_VAR SMALLINT;
DECLARE LEVEL_ID_VAR SMALLINT;
DECLARE SAMPLE_TYPE_ID_VAR SMALLINT;

DECLARE SAMPLE_ID_VAR INTEGER;

DECLARE C CURSOR FOR ( /*returns assay_sample records out of imported records*/
   SELECT I.FILENAME_DESC, I.SUBJECT_NUM, I.FLUID_TYPE_ID, I.LEVEL_TP_ID,
          I.SAMPLE_TYPE_ID
   FROM   TMP_XEVO_IMPORT I
   GROUP
      BY  I.FILENAME_DESC, I.SUBJECT_NUM, I.FLUID_TYPE_ID, I.LEVEL_TP_ID,
          I.SAMPLE_TYPE_ID
);

DECLARE D CURSOR FOR ( /*returns SAMPLE_ID by subject, fluid, timepoint*/
  SELECT smpl.SAMPLE_ID
  FROM SAMPLE smpl
  WHERE smpl.SUBJECT_ID = 
  ( select subj.SUBJECT_ID
    from SUBJECT subj
    where ( subj.SUBJECT_NUM = :SUBJECT_NUM_VAR ) )  AND
  ( smpl.FLUID_TYPE_ID = :FLUID_TYPE_ID_VAR )        AND
  ( smpl.TIME_POINT_ID = :LEVEL_TP_VAR )
);


DECLARE ANYLYTE_NAME_VAR VARCHAR(30);

DECLARE AREA_VAR NUMERIC(10, 3);
DECLARE HEIGHT_VAR INTEGER;
DECLARE RT_VAR NUMERIC(4, 2);
DECLARE ISTD_AREA_VAR NUMERIC(10, 3);
DECLARE ISTD_HEIGHT_VAR INTEGER;
DECLARE ISTD_RT_VAR NUMERIC(4, 2);
DECLARE NUM_SPEC_CONC_VAR NUMERIC(10, 5);
DECLARE RESPONSE_VAR NUMERIC(10, 5);
DECLARE NUM_ANAL_CONC_VAR NUMERIC(10, 5);
DECLARE CONC_DEV_PERC_VAR NUMERIC(10, 5);
DECLARE SIGNOISE_VAR NUMERIC(5, 1);
DECLARE CHROMNOISE_VAR NUMERIC(7, 2);

DECLARE QUAN_TYPE_ID_VAR SMALLINT;

DECLARE E CURSOR FOR ( /*returns ASSAY_DATA set out of imported records*/
 SELECT I.ANYLYTE_NAME, I.FILENAME_DESC, I.AREA, I.HEIGHT, I.RT,
  I.ISTD_AREA, I.ISTD_HEIGHT, I.ISTD_RT, I.NUM_SPEC_CONC, I.RESPONSE, I.NUM_ANAL_CONC,
  I.CONC_DEV_PERC, I.SIGNOISE, I.CHROMNOISE, I.QUAN_TYPE_ID
  FROM TMP_XEVO_IMPORT I
);

DECLARE ASSAY_SAMPLE_ID_VAR BIGINT;
DECLARE F CURSOR FOR (/*returns ASSAY_SAMPLE_ID by Sample name ("filename") */
  SELECT A.ASSAY_SAMPLE_ID
  FROM ASSAY_SAMPLE A
  WHERE (A.DESCRIP = :FILENAME_DESC_VAR) and (A.ASSAY_ID = :ASSAY_ID_VAR)
);

DECLARE ANALYTE_ID_VAR SMALLINT;
DECLARE ASSAY_DATA_ID_VAR BIGINT;
DECLARE G CURSOR FOR (/*returns ASSAY_SAMPLE_ID by Sample name ("filename") */
  SELECT A.ANALYTE_ID
  FROM ANALYTE A
  WHERE A.ANALYTE_NAME = :ANYLYTE_NAME_VAR
);


DECLARE CURVE_VAR VARCHAR(15);
DECLARE WEIGHTING_VAR VARCHAR(15);
DECLARE ORIGIN_VAR VARCHAR(15);
DECLARE EQUATION_VAR VARCHAR(30);
DECLARE R_VAR NUMERIC(10, 5);
DECLARE R_SQR_VAR NUMERIC(10, 5);
DECLARE NUM_SLOPE_VAR NUMERIC(10, 5);
DECLARE NUM_INTERSECT_VAR NUMERIC(10, 5);
DECLARE H CURSOR FOR ( /* returns ASSAY_RESULTS for each analyte+quan type */
  SELECT 
    i.ANYLYTE_NAME, i.QUAN_TYPE_ID,
    i.CURVE, i.WEIGHTING, i.ORIGIN,
    i.EQUATION, i.R, i.R_SQR, i.NUM_SLOPE, i.NUM_INTERSECT
  FROM TMP_XEVO_IMPORT i
  GROUP BY
    i.ANYLYTE_NAME, i.QUAN_TYPE_ID,
    i.CURVE, i.WEIGHTING, i.ORIGIN,
    i.EQUATION, i.R, i.R_SQR, i.NUM_SLOPE, i.NUM_INTERSECT
);

BEGIN

ASSAY_ID_VAR = GEN_ID(ASSAY_ASSAY_ID_GEN, 0);
OPEN A;
FETCH A INTO :ASSAY_DATE_VAR,
			 :ASSAY_TYPE_ID_VAR,
			 :DONE_BY_VAR,
			 :PROCESS_BY_VAR,
      		 :SAMPLE_PROCESS_BY_VAR,
			 :ENZYME_ID_VAR,
			 :ANTIBODY_ID_VAR,
			 :EXPER_FILE_VAR;



UPDATE OR INSERT INTO ASSAY (ASSAY_DATE, ASSAY_TYPE_ID, ASSAY_DONE_BY, 
 DATA_PROCESS_BY, SAMPLE_PROCESSED_BY, ENZYME_ID, ANTIBODY_ID, DESCRIP)
VALUES (:ASSAY_DATE_VAR,
        :ASSAY_TYPE_ID_VAR,
        :DONE_BY_VAR,
        :PROCESS_BY_VAR,
        :SAMPLE_PROCESS_BY_VAR,
        :ENZYME_ID_VAR,
        :ANTIBODY_ID_VAR,
		:EXPER_FILE_VAR )
 matching (DESCRIP)
 returning ASSAY_ID into :ASSAY_ID_VAR;
 
CLOSE A;

OPEN H;

 WHILE (1=1) DO
   BEGIN
     FETCH H
       INTO :ANYLYTE_NAME_VAR,
            :QUAN_TYPE_ID_VAR,
            :CURVE_VAR,
            :WEIGHTING_VAR,
            :ORIGIN_VAR,
            :EQUATION_VAR,
            :R_VAR,
            :R_SQR_VAR,
            :NUM_SLOPE_VAR,
            :NUM_INTERSECT_VAR;
     if (row_count = 0) then leave;         
     
      OPEN G;
        FETCH G INTO :ANALYTE_ID_VAR;
      CLOSE G;
    
     UPDATE OR INSERT INTO ASSAY_RESULT (
      ASSAY_ID, ANALYTE_ID, QUANT_TYPE_ID,
      CURVE, WEIGHTING, ORIGIN, EQUATION,
      R, R_SQR, NUM_SLOPE, NUM_INTERSECT )
     VALUES ( :ASSAY_ID_VAR, /* Assay ID */
              :ANALYTE_ID_VAR, /* Analyte ID */
              :QUAN_TYPE_ID_VAR, /* Quan ID */
              :CURVE_VAR,
              :WEIGHTING_VAR,
              :ORIGIN_VAR,
              :EQUATION_VAR,
              :R_VAR,
              :R_SQR_VAR,
              :NUM_SLOPE_VAR,
              :NUM_INTERSECT_VAR )
     matching ( ASSAY_ID, ANALYTE_ID, QUANT_TYPE_ID );
    END

CLOSE H;

OPEN C;
   WHILE (1=1) DO
   BEGIN
     FETCH C
       INTO :FILENAME_DESC_VAR,
   	        :SUBJECT_NUM_VAR,
            :FLUID_TYPE_ID_VAR,
            :LEVEL_TP_VAR,
            :SAMPLE_TYPE_ID_VAR;
     if (row_count = 0) then leave;         
     
     SAMPLE_ID_VAR = NULL;
     LEVEL_ID_VAR = LEVEL_TP_VAR;
     if (SAMPLE_TYPE_ID_VAR = 0) then 
     begin 
       OPEN D;
       FETCH D INTO :SAMPLE_ID_VAR;
       CLOSE D;
       LEVEL_ID_VAR = NULL;
     end
     
     
     
    /*-------------------------------------*/              
     UPDATE OR INSERT INTO ASSAY_SAMPLE (ASSAY_SAMPLE_TYPE_ID, ASSAY_ID,
     VOLUME, VOLUME_UNIT_ID, DESCRIP, SAMPLE_ID, LEVEL_ID )
     VALUES ( :SAMPLE_TYPE_ID_VAR, /*etc. Unknown*/
              :ASSAY_ID_VAR, /* + 1, */
              1, /*Volume*/
              5, /*Volume unit 5 - mL*/
              :FILENAME_DESC_VAR, /*Sample name - file name*/
              :SAMPLE_ID_VAR, /*Sample_ID here*/
              :LEVEL_ID_VAR )
     matching ( DESCRIP, ASSAY_ID );
    /* returning ASSAY_SAMPLE_ID into :id;*/
    /*-------------------------------------*/                      
    END
CLOSE C;

OPEN E;
   ASSAY_DATA_ID_VAR = GEN_ID(ASSAY_DATA_ASSAY_DATA_ID_GEN, 0);
   WHILE (1=1) DO
   BEGIN
     FETCH E
      INTO
            :ANYLYTE_NAME_VAR,
            :FILENAME_DESC_VAR,
            :AREA_VAR,
            :HEIGHT_VAR,
            :RT_VAR,
            :ISTD_AREA_VAR,
            :ISTD_HEIGHT_VAR,
            :ISTD_RT_VAR,
            :NUM_SPEC_CONC_VAR,
            :RESPONSE_VAR,
            :NUM_ANAL_CONC_VAR,
            :CONC_DEV_PERC_VAR,
            :SIGNOISE_VAR,
            :CHROMNOISE_VAR,
            :QUAN_TYPE_ID_VAR;
     if (row_count = 0) then leave;         
     
     ASSAY_DATA_ID_VAR = ASSAY_DATA_ID_VAR + 1;
     
     OPEN F;
       FETCH F INTO :ASSAY_SAMPLE_ID_VAR;
     CLOSE F;
     
     OPEN G;
       FETCH G INTO :ANALYTE_ID_VAR;
     CLOSE G;
     

     
     INSERT INTO ASSAY_DATA ( ASSAY_SAMPLE_ID, ANALYTE_ID,
     QUANT_TYPE_ID)
     VALUES ( /* ASSAY_DATA_ID from ASSAY_DATA_ID_GEN */ 
              :ASSAY_SAMPLE_ID_VAR,
              :ANALYTE_ID_VAR,
              :QUAN_TYPE_ID_VAR      );
     
              
     INSERT INTO DATA_XEVO (ASSAY_DATA_ID, NUM_SPEC_CONC, AREA, HEIGHT, RT,
      ISTD_AREA, ISTD_HEIGHT, ISTD_RT, RESPONSE, NUM_ANAL_CONC,
      CONC_DEV_PERC, SIGNOISE, CHROMNOISE, "VERSION" )
     VALUES ( :ASSAY_DATA_ID_VAR, /*Syncronized with ASSAY_DATA_ID_GEN*/
              :NUM_SPEC_CONC_VAR,
              :AREA_VAR,          /*AREA NUMERIC(10, 3), */
              :HEIGHT_VAR,        /*HEIGHT INTEGER, */
              :RT_VAR,            /*RT NUMERIC(4, 2) */
              :ISTD_AREA_VAR,     /*ISTD_AREA NUMERIC(10, 3), */
              :ISTD_HEIGHT_VAR,   /*ISTD_HEIGHT INTEGER */
              :ISTD_RT_VAR,       /*ISTD_RT NUMERIC(4, 2) */
              :RESPONSE_VAR,      /*RESPONSE NUMERIC(10, 5) */ 
              :NUM_ANAL_CONC_VAR, /*NUM_ANAL_CONC NUMERIC(10, 5) */
              :CONC_DEV_PERC_VAR, /*CONC_DEV_PERC_VAR NUMERIC(10, 5) */
              :SIGNOISE_VAR,      /*SIGNOISE_VAR NUMERIC(5, 1) */
		  	  :CHROMNOISE_VAR,    /*CHROMNOISE NUMERIC(7, 2) */
               1			      /*"VERSION"     );*/          );
         
              
   END
CLOSE E; 

END;

COMMIT;